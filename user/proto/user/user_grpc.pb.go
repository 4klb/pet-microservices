// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignInServiceClient is the client API for SignInService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignInServiceClient interface {
	InsertUser(ctx context.Context, in *InsertUserReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetUserByID(ctx context.Context, in *GetByIDReq, opts ...grpc.CallOption) (*GetByIDResp, error)
	GetUsersByIDs(ctx context.Context, in *GetByIDsReq, opts ...grpc.CallOption) (*GetByIDsRes, error)
	UpdateUserByID(ctx context.Context, in *UpdateByIDReq, opts ...grpc.CallOption) (*StatusResp, error)
	DeleteUserByID(ctx context.Context, in *DeleteByIDReq, opts ...grpc.CallOption) (*StatusResp, error)
}

type signInServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignInServiceClient(cc grpc.ClientConnInterface) SignInServiceClient {
	return &signInServiceClient{cc}
}

func (c *signInServiceClient) InsertUser(ctx context.Context, in *InsertUserReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, "/userService.SignInService/InsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signInServiceClient) GetUserByID(ctx context.Context, in *GetByIDReq, opts ...grpc.CallOption) (*GetByIDResp, error) {
	out := new(GetByIDResp)
	err := c.cc.Invoke(ctx, "/userService.SignInService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signInServiceClient) GetUsersByIDs(ctx context.Context, in *GetByIDsReq, opts ...grpc.CallOption) (*GetByIDsRes, error) {
	out := new(GetByIDsRes)
	err := c.cc.Invoke(ctx, "/userService.SignInService/GetUsersByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signInServiceClient) UpdateUserByID(ctx context.Context, in *UpdateByIDReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, "/userService.SignInService/UpdateUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signInServiceClient) DeleteUserByID(ctx context.Context, in *DeleteByIDReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, "/userService.SignInService/DeleteUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignInServiceServer is the server API for SignInService service.
// All implementations must embed UnimplementedSignInServiceServer
// for forward compatibility
type SignInServiceServer interface {
	InsertUser(context.Context, *InsertUserReq) (*StatusResp, error)
	GetUserByID(context.Context, *GetByIDReq) (*GetByIDResp, error)
	GetUsersByIDs(context.Context, *GetByIDsReq) (*GetByIDsRes, error)
	UpdateUserByID(context.Context, *UpdateByIDReq) (*StatusResp, error)
	DeleteUserByID(context.Context, *DeleteByIDReq) (*StatusResp, error)
	mustEmbedUnimplementedSignInServiceServer()
}

// UnimplementedSignInServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignInServiceServer struct {
}

func (UnimplementedSignInServiceServer) InsertUser(context.Context, *InsertUserReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}
func (UnimplementedSignInServiceServer) GetUserByID(context.Context, *GetByIDReq) (*GetByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedSignInServiceServer) GetUsersByIDs(context.Context, *GetByIDsReq) (*GetByIDsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByIDs not implemented")
}
func (UnimplementedSignInServiceServer) UpdateUserByID(context.Context, *UpdateByIDReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserByID not implemented")
}
func (UnimplementedSignInServiceServer) DeleteUserByID(context.Context, *DeleteByIDReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByID not implemented")
}
func (UnimplementedSignInServiceServer) mustEmbedUnimplementedSignInServiceServer() {}

// UnsafeSignInServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignInServiceServer will
// result in compilation errors.
type UnsafeSignInServiceServer interface {
	mustEmbedUnimplementedSignInServiceServer()
}

func RegisterSignInServiceServer(s grpc.ServiceRegistrar, srv SignInServiceServer) {
	s.RegisterService(&SignInService_ServiceDesc, srv)
}

func _SignInService_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignInServiceServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.SignInService/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignInServiceServer).InsertUser(ctx, req.(*InsertUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignInService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignInServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.SignInService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignInServiceServer).GetUserByID(ctx, req.(*GetByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignInService_GetUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignInServiceServer).GetUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.SignInService/GetUsersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignInServiceServer).GetUsersByIDs(ctx, req.(*GetByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignInService_UpdateUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignInServiceServer).UpdateUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.SignInService/UpdateUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignInServiceServer).UpdateUserByID(ctx, req.(*UpdateByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignInService_DeleteUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignInServiceServer).DeleteUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.SignInService/DeleteUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignInServiceServer).DeleteUserByID(ctx, req.(*DeleteByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SignInService_ServiceDesc is the grpc.ServiceDesc for SignInService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignInService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userService.SignInService",
	HandlerType: (*SignInServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertUser",
			Handler:    _SignInService_InsertUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _SignInService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUsersByIDs",
			Handler:    _SignInService_GetUsersByIDs_Handler,
		},
		{
			MethodName: "UpdateUserByID",
			Handler:    _SignInService_UpdateUserByID_Handler,
		},
		{
			MethodName: "DeleteUserByID",
			Handler:    _SignInService_DeleteUserByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
